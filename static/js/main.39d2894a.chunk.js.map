{"version":3,"sources":["component/Tile/Tile.js","util/images.js","util/TileLoader.js","component/Nav/Nav.js","component/Jumbotron/Jumbotron.js","pages/ClickyGame.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","src","onClick","clickHandler","alt","key","id","imageGallery","title","TileLoader","createTiles","tileArray","i","images","length","image","name","wasClicked","Navbar","href","Jumbotron","message","highScore","currentScore","ClickyGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createGameTiles","tiles","setState","createTileComponent","imageObject","Tile_Tile","clickEvent","createTileComponents","imageObjectArray","map","randomizeArray","array","j","x","Math","floor","random","event","state","tileId","target","currentIndexOfClickedTile","findIndex","userMessage","some","newScore","Nav","Jumbotron_Jumbotron","Component","App","pages_ClickyGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAWeA,MAPf,SAAeC,GACX,OACYC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,2BAA0BC,IAAOL,EAAMK,IAAKC,QAAWN,EAAMO,aAAcC,IAAKR,EAAMQ,IAAKC,IAAMT,EAAMU,GAAIA,GAAMV,EAAMU,MCSxIC,EAfM,CACjB,CAACD,GAAG,IAAKL,IAAI,qBAAsBO,MAAM,SACzC,CAACF,GAAG,IAAKL,IAAI,sBAAuBO,MAAM,UAC1C,CAACF,GAAG,IAAKL,IAAI,wBAAyBO,MAAM,cAC5C,CAACF,GAAG,IAAKL,IAAI,kBAAmBO,MAAM,eACtC,CAACF,GAAG,IAAKL,IAAI,wBAAyBO,MAAM,aAC5C,CAACF,GAAG,IAAKL,IAAI,2BAA4BO,MAAM,gBAC/C,CAACF,GAAG,IAAKL,IAAI,qBAAsBO,MAAM,SACzC,CAACF,GAAG,IAAKL,IAAI,qBAAsBO,MAAM,SACzC,CAACF,GAAG,IAAKL,IAAI,oBAAqBO,MAAM,QACxC,CAACF,GAAG,KAAML,IAAI,uBAAwBO,MAAM,WAC5C,CAACF,GAAG,KAAML,IAAI,qBAAsBO,MAAM,SAC1C,CAACF,GAAG,KAAML,IAAI,qBAAsBO,MAAM,UCX/BC,EAAA,CACXC,YAAa,WAGb,IAFI,IAAIC,EAAY,GAEZC,EAAI,EAAGA,EAAIC,EAAOC,OAAOF,IAC7BD,EAAUC,GAAK,CACXG,MAAMF,EAAOD,GAAGX,IAChBe,KAAMH,EAAOD,GAAGJ,MAChBF,GAAGO,EAAOD,GAAGN,GACbW,YAAY,GAGpB,OAAON,ICAIO,MAVf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAemB,KAAK,KAAjC,iBCWSC,MAdf,SAAmBxB,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,YACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQJ,EAAMyB,SAC3BxB,EAAAC,EAAAC,cAAA,wBAAgBH,EAAM0B,UAAtB,KACAzB,EAAAC,EAAAC,cAAA,mBAAWH,EAAM2B,aAAjB,OC2IOC,cA7IX,SAAAA,EAAY5B,GAAM,IAAA6B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhC,KAeVoC,gBAAkB,WAEd,IAAIC,EAAQxB,EAAWC,cACvBe,EAAKS,SAAS,CACVvB,UAAWsB,KApBDR,EAyBlBU,oBAAsB,SAAAC,GAClB,OAAQvC,EAAAC,EAAAC,cAACsC,EAAD,CACRpC,IAAMmC,EAAYrB,MAClBZ,aAAgBsB,EAAKa,WACrBlC,IAAOgC,EAAYpB,KACnBX,IAAO+B,EAAY9B,GACnBA,GAAM8B,EAAY9B,MA/BJmB,EAoClBc,qBAAuB,SAAAC,GACnB,OAAOA,EAAiBC,IAAIhB,EAAKU,sBArCnBV,EAyClBiB,eAAiB,SAAAC,GAET,IAAIC,EAAGC,EAAGjC,EACV,IAAKA,EAAI+B,EAAM7B,OAAS,EAAGF,EAAI,EAAGA,IAC9BgC,EAAIE,KAAKC,MAAMD,KAAKE,UAAYpC,EAAI,IACpCiC,EAAIF,EAAM/B,GACV+B,EAAM/B,GAAK+B,EAAMC,GACjBD,EAAMC,GAAKC,EAEf,OAAOF,GAlDGlB,EAuDlBa,WAAa,SAACW,GACV,IAAMN,EAAQlB,EAAKyB,MAAMvC,UACnBwC,EAASF,EAAMG,OAAO9C,GAEvB+C,EAA6BV,EAAMW,UAAU,SAAAT,GAAC,OAAIA,EAAEvC,KAAO6C,IAEjE,GAAGR,EAAMU,GAA2BpC,WAC7BQ,EAAKyB,MAAM3B,aAAc,EACvBE,EAAKS,SAAS,CAACX,aAAaE,EAAKyB,MAAM3B,aAAc,EACrDgC,YAAc,gDAIf9B,EAAKS,SAAS,CACbqB,YAAc,6CACdhC,aAAe,IAEhBE,EAAKO,wBASZ,GAFAW,EAAMU,GAA2BpC,YAAa,EAE3C0B,EAAMa,KAAK,SAACX,GAAD,OAAwB,IAAjBA,EAAE5B,aAEnBQ,EAAKS,SAAS,CACVvB,UAAUgC,EACVpB,aAAcE,EAAKyB,MAAM3B,aAAe,EACxCgC,YAAc,qCAGjB,CACD,IAAME,EAAWhC,EAAKyB,MAAM3B,aAAc,EACvCE,EAAKyB,MAAM5B,UAAYmC,EACtBhC,EAAKS,SAAS,CACVZ,UAAYmC,EACZF,YAAc,4CACdhC,aAAe,IAGnBE,EAAKS,SAAS,CACVqB,YAAc,gEACdhC,aAAe,IAItBE,EAAKO,kBAOVP,EAAKS,SAAS,CACVvB,UAAWc,EAAKiB,eAAejB,EAAKyB,MAAMvC,cA9G9Cc,EAAKyB,MAAQ,CACTvC,UAAW,GACXW,UAAU,EACVC,aAAa,EACbgC,YAAa,kFANH9B,mFAadG,KAAKI,mDAwGD,IACIrB,EAAciB,KAAKsB,MAAnBvC,UACR,OAAOA,EAAUG,OACbjB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC2D,EAAD,MACA7D,EAAAC,EAAAC,cAAC4D,EAAD,CACAtC,QAAWO,KAAKsB,MAAMK,YACtBjC,UAAaM,KAAKsB,MAAM5B,UACxBC,aAAgBK,KAAKsB,MAAM3B,eAG1BK,KAAKW,qBAAqB5B,IAK/Bd,EAAAC,EAAAC,cAAA,+BAvIiB6D,aCOVC,MATf,WACE,OACEhE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+D,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39d2894a.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\n\nfunction Tile (props) {\n    return (\n                <img className =\"tileImage mr-2 mt-1 zoom\"src = {props.src} onClick = {props.clickHandler} alt={props.alt} key ={props.id} id = {props.id}></img>\n        \n    );  \n}\n\nexport default Tile;","const imageGallery = [\n    {id:\"1\", src:'./images/Mario.jpg', title:'Mario'},\n    {id:\"2\", src:'./images/Bowser.jpg', title:'Bowser'},\n    {id:\"3\", src:'./images/BowserJR.jpg', title:'Bowser Jr.'},\n    {id:\"4\", src:'./images/DK.jpg', title:'Donkey Kong'},\n    {id:\"5\", src:'./images/DryBones.jpg', title:'Dry Bones'},\n    {id:\"6\", src:'./images/KoopaTroopa.jpg', title:'Koopa Troopa'},\n    {id:\"7\", src:'./images/Luigi.jpg', title:'Luigi'},\n    {id:\"8\", src:'./images/Peach.jpg', title:'Peach'},\n    {id:\"9\", src:'./images/Toad.jpg', title:'Toad'},\n    {id:\"10\", src:'./images/Waluigi.jpg', title:'Waluigi'},\n    {id:\"11\", src:'./images/Wario.jpg', title:'Wario'},\n    {id:\"12\", src:'./images/Yoshi.jpg', title:'Yoshi'}\n];\n\nexport default imageGallery;\n","import images from './images';\nexport default {\n    createTiles: function () {\n        let tileArray = [];\n\n    for(let i = 0; i < images.length;i++){\n        tileArray[i] = {\n            image:images[i].src,\n            name: images[i].title,\n            id:images[i].id,\n            wasClicked: false\n        }\n    }\n    return tileArray;\n    } \n}\n","import React from \"react\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Clicky Game\n      </a>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron mario\">\n        <h1 className=\"display-4\">Welcome!</h1>\n        <p className=\"lead\">{props.message}</p>\n        <p>High Score: {props.highScore} </p> \n        <p>Score: {props.currentScore} </p>     \n  </div>\n  );\n}\n\n\n\n\nexport default Jumbotron;\n","import React, {Component} from 'react';\nimport Tile from \"../component/Tile/Tile\";\nimport TileLoader from \"../util/TileLoader\";\nimport Nav from \"../component/Nav/Nav\";\nimport Jumbo from \"../component/Jumbotron/Jumbotron\";\n\nclass ClickyGame extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            tileArray: [],\n            highScore:0,\n            currentScore:0,\n            userMessage: \"Click any tile to begin playing. The goal is click a different tile each time!\"\n        };\n\n    }\n\n    componentDidMount(){\n        // setTimeout(this.createGameTiles, 5000);\n        this.createGameTiles();\n    }\n\n    createGameTiles = () =>{\n\n        let tiles = TileLoader.createTiles();\n        this.setState({\n            tileArray: tiles\n        });\n\n    };\n\n    createTileComponent = imageObject => {\n        return  <Tile\n        src ={imageObject.image}\n        clickHandler = {this.clickEvent}\n        alt = {imageObject.name}\n        key = {imageObject.id}\n        id = {imageObject.id}\n        />;\n\n    }\n\n    createTileComponents = imageObjectArray => {\n        return imageObjectArray.map(this.createTileComponent);\n\n    }\n\n    randomizeArray = array => {\n        \n            var j, x, i;\n            for (i = array.length - 1; i > 0; i--) {\n                j = Math.floor(Math.random() * (i + 1));\n                x = array[i];\n                array[i] = array[j];\n                array[j] = x;\n            }\n            return array;\n        \n    }\n\n   \n    clickEvent = (event) =>{\n        const array = this.state.tileArray;\n        const tileId = event.target.id;\n        \n       const currentIndexOfClickedTile =  array.findIndex(x => x.id === tileId);\n//START OF INCORRECT BLOCK\n       if(array[currentIndexOfClickedTile].wasClicked){ //User was incorrect\n           if(this.state.currentScore >0){ //they have a point to lose, remove a point\n                this.setState({currentScore:this.state.currentScore -1,\n                userMessage : \"Sorry that was incorrect, you lost a point\"\n                });\n           }else{ //Score is zero, they don't have any more points to lose, they lost the game\n               //User lost the game\n               this.setState({\n                userMessage : \"You lost the game, the game has been reset\",\n                currentScore : 0\n                });\n               this.createGameTiles(); //Reset Data \n           }\n\n// END OF INCORRECT BLOCK\n \n//START OF USER CORRECT BLOCK\n       }else{ //User was correct\n        array[currentIndexOfClickedTile].wasClicked = true;\n        //Check if they got some of the characters left\n        if(array.some((x) => x.wasClicked === false)){ //Checks if there are some tiles remaining\n            //They just won the round\n            this.setState({\n                tileArray:array,\n                currentScore: this.state.currentScore + 1 ,\n                userMessage : \"Congrats you won that round!\"\n\n        });        \n        }else{ //They won the game\n            const newScore = this.state.currentScore +1;\n            if(this.state.highScore < newScore){ //Check if they have a new high score\n                this.setState({\n                    highScore : newScore, //Set a new high score\n                    userMessage : \"A new high score, the game has been reset\",\n                    currentScore : 0\n                });\n             }else{ // No new high score\n                this.setState({\n                    userMessage : \"You Won, try to beat your high score, the game has been reset\",\n                    currentScore : 0\n                });\n\n             }\n             this.createGameTiles(); //Reset Data  \n        }       \n    }\n//END OF USER CORRECT BLOCK\n            \n\n        \n        this.setState({\n            tileArray: this.randomizeArray(this.state.tileArray)\n        });\n       \n    };\n\n    render(){\n        const { tileArray } = this.state;\n        return tileArray.length ? (\n            <div>\n            \n            <Nav/>\n            <Jumbo\n            message = {this.state.userMessage}\n            highScore = {this.state.highScore}\n            currentScore = {this.state.currentScore}\n            />\n\n            {this.createTileComponents(tileArray)}\n            </div>\n            \n        ) : (\n        \n        <h1>Loading...</h1>);\n      \n\n\n    }\n    \n} \nexport default ClickyGame;","import React from 'react';\nimport './App.css';\nimport ClickyGame from \"./pages/ClickyGame\"\n\nfunction App() {\n  return (\n    <div>\n      <ClickyGame/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}